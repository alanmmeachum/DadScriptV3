"use strict";
exports.__esModule = true;
var tslib_1 = require("tslib");
var react_1 = require("react");
var util_1 = require("./util");
var getInitialState = function (queryId, initialLoad) { return ({
    queryId: queryId,
    isLoading: initialLoad === undefined,
    isLive: false,
    isSyncing: false,
    results: initialLoad && initialLoad.results || undefined,
    count: initialLoad && initialLoad.count || undefined
}); };
var ActionTypes;
(function (ActionTypes) {
    ActionTypes[ActionTypes["LoadLocalDatastoreResults"] = 0] = "LoadLocalDatastoreResults";
    ActionTypes[ActionTypes["SetIsLive"] = 1] = "SetIsLive";
    ActionTypes[ActionTypes["SetIsSyncing"] = 2] = "SetIsSyncing";
    ActionTypes[ActionTypes["LoadParseServerResults"] = 3] = "LoadParseServerResults";
    ActionTypes[ActionTypes["LoadResult"] = 4] = "LoadResult";
    ActionTypes[ActionTypes["UnloadResult"] = 5] = "UnloadResult";
    ActionTypes[ActionTypes["Fail"] = 6] = "Fail";
    ActionTypes[ActionTypes["Reset"] = 7] = "Reset";
})(ActionTypes || (ActionTypes = {}));
var loadLocalDatastoreResults = function (queryId, results, count) { return ({
    type: ActionTypes.LoadLocalDatastoreResults,
    payload: {
        queryId: queryId,
        results: results,
        count: count
    }
}); };
var setIsLive = function (queryId, isLive) { return ({
    type: ActionTypes.SetIsLive,
    payload: {
        queryId: queryId,
        isLive: isLive
    }
}); };
var setIsSyncing = function (queryId, isSyncing) { return ({
    type: ActionTypes.SetIsSyncing,
    payload: {
        queryId: queryId,
        isSyncing: isSyncing
    }
}); };
var loadParseServerResults = function (queryId, results, count) { return ({
    type: ActionTypes.LoadParseServerResults,
    payload: {
        queryId: queryId,
        results: results,
        count: count
    }
}); };
var loadResult = function (queryId, result, order, limit) { return ({
    type: ActionTypes.LoadResult,
    payload: {
        queryId: queryId,
        result: result,
        order: order,
        limit: limit
    }
}); };
var unloadResult = function (queryId, result) { return ({
    type: ActionTypes.UnloadResult,
    payload: {
        queryId: queryId,
        result: result
    }
}); };
var fail = function (queryId, error) { return ({
    type: ActionTypes.Fail,
    payload: {
        queryId: queryId,
        error: error
    }
}); };
var reset = function (initialLoad) { return ({
    type: ActionTypes.Reset,
    payload: {
        initialLoad: initialLoad
    }
}); };
var reducer = function (state, action) {
    if (action.type === ActionTypes.Reset) {
        return getInitialState(state.queryId + 1, action.payload.initialLoad);
    }
    else if (action.payload.queryId !== state.queryId ||
        state.error) {
        return state;
    }
    switch (action.type) {
        case ActionTypes.LoadLocalDatastoreResults: {
            return (0, tslib_1.__assign)((0, tslib_1.__assign)({}, state), { isLoading: false, results: state.isLoading ? action.payload.results : state.results, count: state.isLoading ? action.payload.count : state.count });
        }
        case ActionTypes.SetIsLive: {
            return (0, tslib_1.__assign)((0, tslib_1.__assign)({}, state), { isLive: action.payload.isLive });
        }
        case ActionTypes.SetIsSyncing: {
            return (0, tslib_1.__assign)((0, tslib_1.__assign)({}, state), { isSyncing: action.payload.isSyncing });
        }
        case ActionTypes.LoadParseServerResults: {
            return (0, tslib_1.__assign)((0, tslib_1.__assign)({}, state), { isLoading: false, isSyncing: false, results: action.payload.results, count: action.payload.count });
        }
        case ActionTypes.LoadResult: {
            var results = state.results;
            var count = state.count;
            if (results) {
                results = results.filter(function (result) { return result.id !== action.payload.result.id; });
                var index = 0;
                if (action.payload.order) {
                    index = results.findIndex(function (result) { return (0, util_1.compareParseObjects)(result, action.payload.result, action.payload.order) >= 0; });
                }
                results.splice(index, 0, action.payload.result);
                if (count !== undefined) {
                    count = state.count + results.length - state.results.length;
                    if (count < 0) {
                        count = 0;
                    }
                    if (count < results.length) {
                        count = results.length;
                    }
                }
                if (action.payload.limit !== undefined &&
                    action.payload.limit >= 0 &&
                    results.length > action.payload.limit) {
                    results = results.slice(0, action.payload.limit);
                }
            }
            return (0, tslib_1.__assign)((0, tslib_1.__assign)({}, state), { results: results, count: count });
        }
        case ActionTypes.UnloadResult: {
            var results = state.results;
            var count = state.count;
            if (results) {
                results = results.filter(function (result) { return result.id !== action.payload.result.id; });
                if (count !== undefined) {
                    count--;
                    if (count < 0) {
                        count = 0;
                    }
                    if (count < results.length) {
                        count = results.length;
                    }
                }
            }
            return (0, tslib_1.__assign)((0, tslib_1.__assign)({}, state), { results: results });
        }
        case ActionTypes.Fail: {
            return (0, tslib_1.__assign)((0, tslib_1.__assign)({}, state), { isLoading: false, isLive: false, isSyncing: false, error: action.payload.error });
        }
    }
};
var useParseQuery = function (query, options) {
    var queryString = (0, react_1.useMemo)(function () {
        return JSON.stringify({
            className: query.className,
            query: query.toJSON()
        });
    }, [query]);
    var _a = options || {}, _b = _a.enabled, enabled = _b === void 0 ? true : _b, _c = _a.enableLocalDatastore, enableLocalDatastore = _c === void 0 ? true : _c, _d = _a.enableLiveQuery, enableLiveQuery = _d === void 0 ? true : _d, initialLoad = _a.initialLoad;
    var _e = initialLoad || {}, initialResults = _e.results, initialCount = _e.count;
    var stateRef = (0, react_1.useRef)(getInitialState(1, initialLoad));
    var _f = (0, react_1.useReducer)(function (state, action) {
        stateRef.current = reducer(state, action);
        return stateRef.current;
    }, stateRef.current), _g = _f[0], queryId = _g.queryId, isLoading = _g.isLoading, isLive = _g.isLive, isSyncing = _g.isSyncing, results = _g.results, count = _g.count, error = _g.error, dispatch = _f[1];
    var localDatastoreQuery = (0, react_1.useMemo)(function () {
        if (enableLocalDatastore) {
            var queryJSON = JSON.parse(queryString);
            var memoedQuery = Parse.Query.fromJSON(queryJSON.className, queryJSON.query);
            memoedQuery.fromPinWithName(queryString);
            return memoedQuery;
        }
        return;
    }, [queryString, enableLocalDatastore]);
    var findFromLocalDatastore = (0, react_1.useCallback)(function () { return (0, tslib_1.__awaiter)(void 0, void 0, void 0, function () {
        var findResult, e_1;
        return (0, tslib_1.__generator)(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, localDatastoreQuery.find()];
                case 1:
                    findResult = _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    e_1 = _a.sent();
                    dispatch(fail(queryId, e_1));
                    return [2 /*return*/];
                case 3:
                    if (localDatastoreQuery._count) {
                        dispatch(loadLocalDatastoreResults(queryId, findResult.results, findResult.count));
                    }
                    else {
                        dispatch(loadLocalDatastoreResults(queryId, findResult));
                    }
                    return [2 /*return*/];
            }
        });
    }); }, [queryId, localDatastoreQuery]);
    var parseServerQuery = (0, react_1.useMemo)(function () {
        var queryJSON = JSON.parse(queryString);
        return Parse.Query.fromJSON(queryJSON.className, queryJSON.query);
    }, [queryString]);
    var pinResults = (0, react_1.useCallback)(function (results) { return (0, tslib_1.__awaiter)(void 0, void 0, void 0, function () {
        var e_2;
        return (0, tslib_1.__generator)(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 4]);
                    return [4 /*yield*/, Parse.Object.unPinAllObjectsWithName(queryString)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, Parse.Object.pinAllWithName(queryString, results)];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    e_2 = _a.sent();
                    dispatch(fail(queryId, e_2));
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); }, [queryString, queryId]);
    var findFromParseServer = (0, react_1.useCallback)(function () {
        var isCanceled = false;
        var attempts = 1;
        var find = function () { return (0, tslib_1.__awaiter)(void 0, void 0, void 0, function () {
            var findResult, e_3, results, count;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (enableLocalDatastore || enableLiveQuery || initialResults) {
                            dispatch(setIsSyncing(queryId, true));
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, parseServerQuery.find()];
                    case 2:
                        findResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_3 = _a.sent();
                        if (e_3 instanceof Parse.Error &&
                            e_3.code === Parse.Error.CONNECTION_FAILED) {
                            if (!isCanceled) {
                                setTimeout(function () {
                                    if (!isCanceled) {
                                        attempts++;
                                        find();
                                    }
                                }, Math.random() * Math.min(30, (Math.pow(2, attempts) - 1)) * 1000);
                            }
                        }
                        else {
                            dispatch(fail(queryId, e_3));
                        }
                        return [2 /*return*/];
                    case 4:
                        results = findResult;
                        if (parseServerQuery._count) {
                            results = findResult.results;
                            count = findResult.count;
                        }
                        dispatch(loadParseServerResults(queryId, results, count));
                        if (!enableLocalDatastore) return [3 /*break*/, 6];
                        return [4 /*yield*/, pinResults(results)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        }); };
        var cancel = function () {
            isCanceled = true;
        };
        find();
        return cancel;
    }, [enableLocalDatastore, enableLiveQuery, initialResults, queryId, parseServerQuery, pinResults]);
    var subscribeLiveQuery = (0, react_1.useCallback)(function () {
        var liveQuerySubscription;
        var cancelFindFromParseServer;
        var loadAndPinResult = function (result) { return (0, tslib_1.__awaiter)(void 0, void 0, void 0, function () {
            var e_4;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dispatch(loadResult(queryId, result, parseServerQuery._order, parseServerQuery._limit));
                        if (!enableLocalDatastore) return [3 /*break*/, 4];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, result.pinWithName(queryString)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_4 = _a.sent();
                        dispatch(fail(queryId, e_4));
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        var unloadAndUnPinResult = function (result) { return (0, tslib_1.__awaiter)(void 0, void 0, void 0, function () {
            var e_5;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dispatch(unloadResult(queryId, result));
                        if (parseServerQuery._limit !== undefined &&
                            parseServerQuery._limit >= 0 &&
                            stateRef.current.results &&
                            stateRef.current.results.length + 1 === parseServerQuery._limit) {
                            if (cancelFindFromParseServer) {
                                cancelFindFromParseServer();
                            }
                            cancelFindFromParseServer = findFromParseServer();
                        }
                        if (!enableLocalDatastore) return [3 /*break*/, 4];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, result.unPinWithName(queryString)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_5 = _a.sent();
                        dispatch(fail(queryId, e_5));
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        var subscribe = function () { return (0, tslib_1.__awaiter)(void 0, void 0, void 0, function () {
            var e_6;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, parseServerQuery.subscribe()];
                    case 1:
                        liveQuerySubscription = _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        e_6 = _a.sent();
                        dispatch(fail(queryId, e_6));
                        return [2 /*return*/];
                    case 3:
                        liveQuerySubscription.on('open', function () {
                            dispatch(setIsLive(queryId, true));
                            if (cancelFindFromParseServer) {
                                cancelFindFromParseServer();
                            }
                            cancelFindFromParseServer = findFromParseServer();
                        });
                        liveQuerySubscription.on('close', function () {
                            dispatch(setIsLive(queryId, false));
                        });
                        liveQuerySubscription.on('create', function (result) { return loadAndPinResult(result); });
                        liveQuerySubscription.on('update', function (result) { return loadAndPinResult(result); });
                        liveQuerySubscription.on('enter', function (result) { return loadAndPinResult(result); });
                        liveQuerySubscription.on('leave', function (result) { return unloadAndUnPinResult(result); });
                        liveQuerySubscription.on('delete', function (result) { return unloadAndUnPinResult(result); });
                        return [2 /*return*/];
                }
            });
        }); };
        var subscribePromise = subscribe();
        var unsubscribe = function () { return (0, tslib_1.__awaiter)(void 0, void 0, void 0, function () {
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (cancelFindFromParseServer) {
                            cancelFindFromParseServer();
                        }
                        return [4 /*yield*/, subscribePromise];
                    case 1:
                        _a.sent();
                        if (liveQuerySubscription) {
                            liveQuerySubscription.unsubscribe();
                        }
                        dispatch(setIsLive(queryId, false));
                        return [2 /*return*/];
                }
            });
        }); };
        return unsubscribe;
    }, [queryString, enableLocalDatastore, queryId, parseServerQuery, findFromParseServer]);
    (0, react_1.useEffect)(function () {
        var cleanUp;
        if (enabled) {
            if (enableLocalDatastore) {
                if (initialResults) {
                    pinResults(initialResults);
                }
                else {
                    findFromLocalDatastore();
                }
            }
            if (enableLiveQuery) {
                cleanUp = subscribeLiveQuery();
            }
            else {
                cleanUp = findFromParseServer();
            }
        }
        return cleanUp;
    }, [queryId]);
    var reload = (0, react_1.useCallback)(function () {
        dispatch(reset(initialLoad));
    }, [initialResults, initialCount]);
    (0, react_1.useEffect)(function () { return reload; }, [
        queryString,
        enabled,
        enableLocalDatastore,
        enableLiveQuery,
        initialResults,
        initialCount
    ]);
    return (0, react_1.useMemo)(function () { return ({
        isLoading: isLoading,
        isLive: isLive,
        isSyncing: isSyncing,
        results: results,
        count: count,
        error: error,
        reload: reload
    }); }, [
        isLoading,
        isLive,
        isSyncing,
        results,
        count,
        error,
        reload
    ]);
};
exports["default"] = useParseQuery;
//# sourceMappingURL=useParseQuery.js.map