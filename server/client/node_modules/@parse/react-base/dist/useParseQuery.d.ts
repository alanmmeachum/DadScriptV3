/// <reference types="parse" />
interface ResultState<T extends Parse.Object<Parse.Attributes>> {
    isLoading: boolean;
    isLive: boolean;
    isSyncing: boolean;
    results?: T[];
    count?: number;
    error?: Error;
}
export interface InitialLoad<T extends Parse.Object<Parse.Attributes>> {
    results: T[];
    count?: number;
}
export interface UseParseQueryOptions<T extends Parse.Object<Parse.Attributes>> {
    enabled?: boolean;
    enableLocalDatastore?: boolean;
    enableLiveQuery?: boolean;
    initialLoad?: InitialLoad<T>;
}
export interface UseParseQueryResult<T extends Parse.Object<Parse.Attributes>> extends ResultState<T> {
    reload: () => void;
}
declare const useParseQuery: <T extends Parse.Object<Parse.Attributes>>(query: Parse.Query<T>, options?: UseParseQueryOptions<T> | undefined) => UseParseQueryResult<T>;
export default useParseQuery;
